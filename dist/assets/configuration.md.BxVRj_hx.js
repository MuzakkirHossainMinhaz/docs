import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.C8hRoDJf.js";const k=JSON.parse('{"title":"Configuration","description":"Learn how to manage and customize your IntentJS application configurations, including environment variables, custom configs, and best practices for configuration management.","frontmatter":{"title":"Configuration","description":"Learn how to manage and customize your IntentJS application configurations, including environment variables, custom configs, and best practices for configuration management.","keywords":"configuration, environment variables, dotenv, custom config, config namespace, IntentConfig, ConfigService, reserved namespaces, best practices","image":null},"headers":[],"relativePath":"configuration.md","filePath":"configuration.md","lastUpdated":1744532764000}'),n={name:"configuration.md"};function o(r,i,l,h,p,c){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h1><p>All of the configurations for your application are stored inside <code>config</code> directory. We have tried to document as much options as possible, so you can go through them at your own pace.</p><p>IntentJS comes packed with pre-defined configurations for databases, caches, filesystems, http settings, etc. You can use the same folder to create your own configurations and use them as needed in the application.</p><h2 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h2><p>IntentJS makes use of <code>dotenv</code> package to read environment variables from your .env files. Environment variables are useful when you are building application for multi-environments, this gives you the flexibility to keep your environment specific values isolated. For example, you can run a db on localhost when developing the app on your system, whereas in Prod it is likely that you will be using some server to host your db.</p><p>One added advantage of using Environment Variables is that it helps you keep your sensitive values as hidden and keep them away from unnecessary access.</p><p>IntentJS already makes use of some environment variables to configure database, cache, filesystems, queue, http, mailers etc. It should be already setup when you created your application using <code>create-intent-app</code> command. You can see all of the environment variables inside <code>.env</code>, and <code>.env.example</code> files.</p><h2 id="create-a-custom-configuration" tabindex="-1">Create a custom configuration <a class="header-anchor" href="#create-a-custom-configuration" aria-label="Permalink to &quot;Create a custom configuration&quot;">​</a></h2><p>While IntentJS comes with pre-defined configurations, you can always come across instances where you will need to create your own custom configuration. In this section, you will learn how to create your own configuration.</p><p>All of the configs are stored inside the <code>config</code> directory present at the root.</p><p>Let&#39;s say you want to create a namespaced config with <code>settings</code> name, you can do so by creating a file <code>config/settings.ts</code>.</p><p>This is how your config will look</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> configNamespace </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;@intentjs/core/config&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> default</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;"> configNamespace</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&#39;settings&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> ()</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;"> =&gt;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> (</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  yourCustomConfigSetting</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> true</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span></code></pre></div><p>After creating the <code>settings</code> namespace, we now need to register it. You can simply export the <code>settings</code> namespaced config from the <code>config/index.ts</code> file.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> settings </span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;./settings&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> default</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> [</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  settings</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">  // other configs</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">]</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span></code></pre></div><h2 id="accessing-the-configuration-values" tabindex="-1">Accessing the configuration values <a class="header-anchor" href="#accessing-the-configuration-values" aria-label="Permalink to &quot;Accessing the configuration values&quot;">​</a></h2><p>If you want to refer the configuration inside your application, you can make use <code>ConfigService</code> class.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> ConfigService </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;@intentjs/core/config&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#F9E2AF;--shiki-dark-font-style:italic;"> AppService</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">  constructor</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">private</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EBA0AC;--shiki-dark-font-style:italic;"> config</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#F9E2AF;--shiki-dark-font-style:italic;"> ConfigService</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">  async</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;"> getName</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">    const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> appName </span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#F38BA8;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">config</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">get</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;app.name&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">    return</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> appName</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><h2 id="reserved-namespaces" tabindex="-1">Reserved Namespaces <a class="header-anchor" href="#reserved-namespaces" aria-label="Permalink to &quot;Reserved Namespaces&quot;">​</a></h2><p>Following namespaces are reserved for IntentJS.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Changing the namespaces can potentially cause some unexpected behaviour in the code, and ultimately result in some functionality not working.</p></div><table tabindex="0"><thead><tr><th>Namespace</th><th>File Path</th></tr></thead><tbody><tr><td><code>app</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/app.ts" target="_blank" rel="noreferrer"><code>config/app.ts</code></a></td></tr><tr><td><code>db</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/db.ts" target="_blank" rel="noreferrer"><code>config/db.ts</code></a></td></tr><tr><td><code>cache</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/cache.ts" target="_blank" rel="noreferrer"><code>config/cache.ts</code></a></td></tr><tr><td><code>filesystem</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/filesystem.ts" target="_blank" rel="noreferrer"><code>config/filesystem.ts</code></a></td></tr><tr><td><code>http</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/http.ts" target="_blank" rel="noreferrer"><code>config/http.ts</code></a></td></tr><tr><td><code>localization</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/locale.ts" target="_blank" rel="noreferrer"><code>config/locale.ts</code></a></td></tr><tr><td><code>logger</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/logger.ts" target="_blank" rel="noreferrer"><code>config/logger.ts</code></a></td></tr><tr><td><code>mailer</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/mailer.ts" target="_blank" rel="noreferrer"><code>config/mailer.ts</code></a></td></tr><tr><td><code>queue</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/queue.ts" target="_blank" rel="noreferrer"><code>config/queue.ts</code></a></td></tr></tbody></table><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><p>This section mentions some of the best practices when it comes to managing and accessing configurations in your applications.</p><ul><li>We recommend keeping the usage of <code>process.env</code> limited to the <code>config</code> directory only.</li></ul>`,25)]))}const g=s(n,[["render",o]]);export{k as __pageData,g as default};
