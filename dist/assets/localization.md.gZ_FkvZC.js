import{_ as k,C as n,c as r,o as c,j as i,G as t,ag as d,a,w as e}from"./chunks/framework.C8hRoDJf.js";const A=JSON.parse('{"title":"Localization","description":"Implement multi-language support in Intent.js applications with our comprehensive localization guide. Learn to manage translations, handle pluralization, and format content for global audiences with practical examples and best practices.","frontmatter":{"title":"Localization","description":"Implement multi-language support in Intent.js applications with our comprehensive localization guide. Learn to manage translations, handle pluralization, and format content for global audiences with practical examples and best practices.","keywords":"Intent.js localization, internationalization, i18n, multi-language support, translations, pluralization, language formatting, global applications","image":null},"headers":[],"relativePath":"localization.md","filePath":"localization.md","lastUpdated":1744527075000}'),g={name:"localization.md"};function y(u,s,C,F,B,f){const h=n("Link"),l=n("FileTree.File"),p=n("FileTree.Folder"),o=n("FileTree");return c(),r("div",null,[s[5]||(s[5]=i("h1",{id:"localization",tabindex:"-1"},[a("Localization "),i("a",{class:"header-anchor",href:"#localization","aria-label":'Permalink to "Localization"'},"​")],-1)),s[6]||(s[6]=i("p",null,"There might be situations where you want to change the text sent to the client as per their chosen locale, this is where localization feature by Intent will help you. It comes with a ridiculously simple API to use it.",-1)),s[7]||(s[7]=i("p",null,"Intent provides a convenient way to retrieve strings in various languages, allowing you to easily support multiple languages within your application.",-1)),s[8]||(s[8]=i("p",null,[a("Language strings are stored in "),i("code",null,"json"),a(" files within the a single directory "),i("code",null,"resources/lang"),a(" by default, but you are free to change it as per your need. Within this directory, the translation strings are to be defined in JSON files. Each language supported by your application would have a corresponding JSON file within this directory. This approach is recommended for application's that have a large number of translatable strings.")],-1)),i("p",null,[s[1]||(s[1]=a("Languages and their corresponding ")),s[2]||(s[2]=i("code",null,".json",-1)),s[3]||(s[3]=a(" files are identified by their ")),t(h,{href:"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes",className:"text-primary"},{default:e(()=>s[0]||(s[0]=[a("ISO-639-1")])),_:1}),s[4]||(s[4]=a(" codes."))]),s[9]||(s[9]=i("p",null,"Recommended directory structure :",-1)),t(o,null,{default:e(()=>[t(p,{name:"resources",defaultOpen:""},{default:e(()=>[t(p,{name:"lang",defaultOpen:""},{default:e(()=>[t(l,{name:"en.json"}),t(l,{name:"hi.json"})]),_:1})]),_:1})]),_:1}),s[10]||(s[10]=d(`<h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>The configuration for localization is stored at <code>config/locale.ts</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> configNamespace </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;@intentjs/core/config&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> default</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;"> configNamespace</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;localization&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> ()</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;"> =&gt;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> (</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  fallbackLang</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;en&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  path</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;resources/lang&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span></code></pre></div><h2 id="defining-translation-strings" tabindex="-1">Defining Translation Strings <a class="header-anchor" href="#defining-translation-strings" aria-label="Permalink to &quot;Defining Translation Strings&quot;">​</a></h2><p>Typically, translation strings are stored in files within the <code>resources/lang</code> directory. Within this directory you&#39;ll have JSON files contianing the key value pairs for a particular language. For example, if your application has a English translation, you should create a <code>resources/lang/en.json</code> file:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// en.json</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">quote</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;If your dreams do not scare you, they are already becoming a reality.&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><p>For applications with a large number of translatable strings, defining every string with a &quot;short key&quot; can become confusing when referencing the keys in your views and it is cumbersome to continually invent keys for every translation string supported by your application.</p><p>For example, if your application has a Hindi translation, you should create a <code>resources/lang/hi.json</code> file:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// hi.json</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">quote</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;अगर आपके सपने आपको नहीं डरा रहे हैं, तो वो पहले से पुरे होने लग चुके हैं।&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><p>You can also nest your strings inside the json file.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// en.json</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">greetings</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">morning</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;Good Morning&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">evening</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;Good Evening&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You should not create conflicting keys i.e 2 keys should not have the same name.</p></div><h2 id="retrieving-translation-strings" tabindex="-1">Retrieving Translation Strings <a class="header-anchor" href="#retrieving-translation-strings" aria-label="Permalink to &quot;Retrieving Translation Strings&quot;">​</a></h2><p>Now that our translation files are created, we will now see how to fetch the string using our <code>__</code> function.</p><p>You can retrieve translation strings from your language files using the <code>__</code> helper function. The <code>__</code> function takes 1 required arguments, the key of the translation string you wish.</p><p>You can use the dot <code>.</code> notation to refer to nested strings. Let&#39;s take a look at different ways of retrieving the values.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> __ </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;@intentjs/core/locale&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">__</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;quote&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// If your dreams do not scare you, they are already becoming a reality.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">__</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;quote&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;hi&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// अगर आपके सपने आपको नहीं डरा रहे हैं, तो वो पहले से पुरे होने लग चुके हैं।</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">__</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;greetings.morning&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// Good Morning</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">__</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;randomKey&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;en&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// randomKey</span></span></code></pre></div><h3 id="replacing-parameters-in-translation-strings" tabindex="-1">Replacing Parameters In Translation Strings <a class="header-anchor" href="#replacing-parameters-in-translation-strings" aria-label="Permalink to &quot;Replacing Parameters In Translation Strings&quot;">​</a></h3><p>If you wish, you may define placeholders in your translation strings. All placeholders are prefixed with a <code>:</code>. For example, you may define a personalized hello message with a placeholder name:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// en.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">hello</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;Hello, :name&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><p>To replace the placeholders when retrieving a translation string, you may pass an array of replacements as the second argument to the <code>__</code> function:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">__</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;hello&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> name</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;vinayak&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;"> // returns =&gt; Hello, vinayak</span></span></code></pre></div><p>If your placeholder contains all capital letters, or only has its first letter capitalized, the translated value will be capitalized accordingly:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">hello</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;Hello, :Name&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;"> // Hello, Vinayak</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">  // OR</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">hello</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;Hello, :NAME&quot;</span><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;"> // Hello, VINAYAK</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><h3 id="pluralization" tabindex="-1">Pluralization <a class="header-anchor" href="#pluralization" aria-label="Permalink to &quot;Pluralization&quot;">​</a></h3><p>Intent can also help you translate strings differently based on pluralization rules that you define. Using a <code>|</code> character as a delimiter, you may distinguish singular and plural forms of a string:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// en.json</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">apples</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;There is one apples|There are many apples&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><p>You may even create more complex pluralization rules which specify translation strings for multiple ranges of values:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">apples</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;[0] There is no apple|[1,10] There are some apples|[11,*] There are many apples&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><p>After defining a translation string that has pluralization options, you may use the <code>transChoice</code> function to retrieve the line for a given &quot;count&quot;. In the below example, since the count is greater than one, the plural form of the translation string is returned:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">transChoice</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;apples&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> 10</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// There are some apples</span></span></code></pre></div><p>If you want to specify the lang, you can pass the <code>lang</code> as 2nd argument and <code>count</code> as 3rd argument.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">transChoice</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;apples&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;hi&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> 10</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// वहाँ कुछ सेब हैं</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The count agrument is required for <code>tranChoice</code></p></div><p>You may also define placeholder attributes in pluralization strings. These placeholders may be replaced by passing an array as the third argument to the <code>transChoice</code> function:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// en.json</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">minutes_ago</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;[1] :value minute ago|[2,*] :value minutes ago&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">transChoice</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;minutes_ago&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> 10</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> value</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> 10</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// 5 minutes ago</span></span></code></pre></div><p>If you would like to display the integer value that was passed to the <code>transChoice</code> function, you may use the built-in <code>:count</code> parameter:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// en.json</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#89B4FA;">apples</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &quot;[0] There are none|[1] There is one|[2,*] There are :count apples&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">transChoice</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&quot;apples&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> 30</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// There are 30 apples</span></span></code></pre></div>`,40))])}const v=k(g,[["render",y]]);export{A as __pageData,v as default};
