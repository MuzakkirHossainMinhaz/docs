import{_ as t,c as i,a2 as a,o as e}from"./chunks/framework.C3fu0AGg.js";const c=JSON.parse('{"title":"Repository","description":null,"frontmatter":{"title":"Repository","description":null,"image":null},"headers":[],"relativePath":"databases/repository.md","filePath":"databases/repository.md","lastUpdated":1733030429000}'),n={name:"databases/repository.md"};function l(h,s,p,r,k,d){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="repository" tabindex="-1">Repository <a class="header-anchor" href="#repository" aria-label="Permalink to &quot;Repository&quot;">​</a></h1><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><p>In the previous sections, you saw how to create a migration, create a model and query the database using it. But when it comes to building a product or a production level product, you need some strong typings and opinionated structures to help you streamline the development process and only let you and your team focus on the business logic rather than investing time in figuring out how something works and why it works.</p><p>Fortunately, IntentJS comes with a custom repository of very common methods which lets you create a repository class for a Database Model (that we created in the previous section).</p><p>A repository is nothing but an abstraction of the querying logic of the models from the business logic.</p><p>For better understanding, let&#39;s take the below example.</p><p>Let&#39;s say you want to get count of all successful orders for all users list with a pagination.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// without repository pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserModel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;users.*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  User.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relatedQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ordersCount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// with repository pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> usersWithOrdersCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listWithCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>If you notice, you can clearly see the abstraction happening under the hood. While this doesn&#39;t help reduce your lines of code, but it does help to make your code a lot more readable and contextual.</p><p>In IntentJS application, creating your own repository is pretty straight forward. You can create your own repo like below</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Injectable, UserModel } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../models/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DatabaseRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InjectModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserModel)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>After you create your repository, now we you need to register this repo as a provider.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [{ provide: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;USER_REPO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, useClass: UserRepository }, UserService],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><p>After registering the repo inside the provider, you can now inject it inside your service to access user models.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;USER_REPO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> userRepo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Now that we have injected it inside our service, we can start using it.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> usersList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.userRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns list of all users</span></span></code></pre></div><p>If you want to only search for one user with some where condition.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>If you want to search for all users with matching where conditions.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>You can also use repo to create or update entries.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tony&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Stark&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, { firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h2 id="repository-query-methods" tabindex="-1">Repository Query Methods <a class="header-anchor" href="#repository-query-methods" aria-label="Permalink to &quot;Repository Query Methods&quot;">​</a></h2><h3 id="all" tabindex="-1"><code>all()</code> <a class="header-anchor" href="#all" aria-label="Permalink to &quot;\`all()\`&quot;">​</a></h3><p>Get all models from table.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> User[]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns User[]</span></span></code></pre></div><h3 id="firstwhere" tabindex="-1"><code>firstWhere()</code> <a class="header-anchor" href="#firstwhere" aria-label="Permalink to &quot;\`firstWhere()\`&quot;">​</a></h3><p>Get the first model with the matching criterias. If not found, it will throw an <code>ModelNotFoundException</code> exception. If you don&#39;t want to throw exception, pass <code>false</code> as second parameter.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">inputs</td><td style="text-align:center;">Y</td><td style="text-align:center;">Where condition that is to be added</td><td style="text-align:center;">undefined</td></tr><tr><td style="text-align:center;">error</td><td style="text-align:center;">N</td><td style="text-align:center;">Throw exception if model is not found</td><td style="text-align:center;">true</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Returns User if found, else throws ModelNotFoundException</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Returns User if found, else throws ModelNotFoundException</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="getwhere" tabindex="-1"><code>getWhere()</code> <a class="header-anchor" href="#getwhere" aria-label="Permalink to &quot;\`getWhere()\`&quot;">​</a></h3><p>Get all models with the matching criterias. If not found, it will throw an <code>ModelNotFoundException</code> exception. If you don&#39;t want to throw exception, pass <code>false</code> as second parameter.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">inputs</td><td style="text-align:center;">Y</td><td style="text-align:center;">Where condition that is to be added</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">error</td><td style="text-align:center;">N</td><td style="text-align:center;">Throw exception if model is not found</td><td style="text-align:center;">true</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Returns User if found, else throws ModelNotFoundException</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Returns User if found, else throws ModelNotFoundException</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="create" tabindex="-1"><code>create()</code> <a class="header-anchor" href="#create" aria-label="Permalink to &quot;\`create()\`&quot;">​</a></h3><p>Create the model in DB and return it&#39;s model equivalent instance.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">inputs</td><td style="text-align:center;">Y</td><td style="text-align:center;">Column values as object</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Create a new model with given inputs</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tony&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Stark&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h3 id="createorupdate" tabindex="-1"><code>createOrUpdate()</code> <a class="header-anchor" href="#createorupdate" aria-label="Permalink to &quot;\`createOrUpdate()\`&quot;">​</a></h3><p>Update or create a model with given condition and values.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">condition</td><td style="text-align:center;">Y</td><td style="text-align:center;">Existence of any model is checked using the object</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">values</td><td style="text-align:center;">Y</td><td style="text-align:center;">If the model is not found, <code>values</code> will be used to add columns</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Update or Create model with given condition and values</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createOrUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tony&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Stark&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>If any user with contact number as &#39;XXXXXXXXXX&#39; exists in the system, it will return the same model. If not, then a new model will be created.</p><h3 id="firstornew" tabindex="-1"><code>firstOrNew()</code> <a class="header-anchor" href="#firstornew" aria-label="Permalink to &quot;\`firstOrNew()\`&quot;">​</a></h3><p>First or Create model with given condition and values</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">condition</td><td style="text-align:center;">Y</td><td style="text-align:center;">Existence of any model is checked using the object</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">values</td><td style="text-align:center;">Y</td><td style="text-align:center;">If the model is not found, <code>values</code> will be used to add columns</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Update or Create model with given condition and values</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNew</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tony&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Stark&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>If any user with contact number as &#39;XXXXXXXXXX&#39; exists in the system, it will return the first model. If not, then a new model will be created.</p><h3 id="update" tabindex="-1"><code>update()</code> <a class="header-anchor" href="#update" aria-label="Permalink to &quot;\`update()\`&quot;">​</a></h3><p>Update the given model with values.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">model</td><td style="text-align:center;">Y</td><td style="text-align:center;">To update model</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">values</td><td style="text-align:center;">Y</td><td style="text-align:center;">Columns to update in the model</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, { firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>New first name of the user will be, &#39;New Name&#39;.</p><h3 id="updatewhere" tabindex="-1"><code>updateWhere()</code> <a class="header-anchor" href="#updatewhere" aria-label="Permalink to &quot;\`updateWhere()\`&quot;">​</a></h3><p>Update all models where criterias are matched.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">where</td><td style="text-align:center;">Y</td><td style="text-align:center;">where conditions</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">values</td><td style="text-align:center;">Y</td><td style="text-align:center;">Columns to update in the model</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>The records where contactNumber is &quot;XXXXXXXXXX&quot; will have the updated firstName of &quot;New Name&quot;.</p><h3 id="exists" tabindex="-1"><code>exists()</code> <a class="header-anchor" href="#exists" aria-label="Permalink to &quot;\`exists()\`&quot;">​</a></h3><p>Check if model exists where criterias are matched.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">inputs</td><td style="text-align:center;">Y</td><td style="text-align:center;">Where condition that is to be added</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Returns true or false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h3 id="count" tabindex="-1"><code>count()</code> <a class="header-anchor" href="#count" aria-label="Permalink to &quot;\`count()\`&quot;">​</a></h3><p>Get count of models matching the criterias</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">inputs</td><td style="text-align:center;">Y</td><td style="text-align:center;">Where condition that is to be added</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Returns the count of models found</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h3 id="refresh" tabindex="-1"><code>refresh()</code> <a class="header-anchor" href="#refresh" aria-label="Permalink to &quot;\`refresh()\`&quot;">​</a></h3><p>Refresh the given model.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">model</td><td style="text-align:center;">Y</td><td style="text-align:center;">Model to be refreshed</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Return the new latest model from db</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, { firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span></code></pre></div><h3 id="delete" tabindex="-1"><code>delete()</code> <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;\`delete()\`&quot;">​</a></h3><p>Delete the given model.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">model</td><td style="text-align:center;">Y</td><td style="text-align:center;">Model to be refreshed</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Return the new latest model from db</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span></code></pre></div><h3 id="deletewhere" tabindex="-1"><code>deleteWhere()</code> <a class="header-anchor" href="#deletewhere" aria-label="Permalink to &quot;\`deleteWhere()\`&quot;">​</a></h3><p>Delete models where criterias are matched.</p><p>Update all models where criterias are matched.</p><p><strong>Parameters:</strong></p><table><thead><tr><th width="181" align="center">Parameter</th><th align="center">Required?</th><th align="center">Description</th><th align="center">Default</th></tr></thead><tbody><tr><td align="center">where</td><td align="center">Y</td><td align="center">where conditions</td><td align="center">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ contactNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXXXXXXXXX&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>The records where contactNumber is &quot;XXXXXXXXXX&quot; will be deleted.</p><h3 id="attach" tabindex="-1"><code>attach()</code> <a class="header-anchor" href="#attach" aria-label="Permalink to &quot;\`attach()\`&quot;">​</a></h3><p>Attach relation&#39;s ids to a model via <code>relation</code>.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">model</td><td style="text-align:center;">Y</td><td style="text-align:center;">model</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">relation</td><td style="text-align:center;">Y</td><td style="text-align:center;">relation to be updated</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">payload</td><td style="text-align:center;">Y</td><td style="text-align:center;">Payload to be attached</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.roles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(role, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;permissions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>Role</code> model will now have <code>Permission</code> model with id 1 in its relation.</p><p>To know more about the <code>payload</code> attribute, <a href="https://vincit.github.io/objection.js/guide/query-examples.html#relation-relate-queries" target="_blank" rel="noreferrer">click here</a>.</p><h3 id="sync" tabindex="-1"><code>sync()</code> <a class="header-anchor" href="#sync" aria-label="Permalink to &quot;\`sync()\`&quot;">​</a></h3><p>Works like <code>attcach</code> only, but trashes the old pre-established relations and creates new ones.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">model</td><td style="text-align:center;">Y</td><td style="text-align:center;">model</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">relation</td><td style="text-align:center;">Y</td><td style="text-align:center;">relation to be updated</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">payload</td><td style="text-align:center;">Y</td><td style="text-align:center;">Payload to be attached</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.roles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(role, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;permissions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>Role</code> model will now have only <code>Permission</code> model with id 1 in its relation.</p><p>To know more about the <code>payload</code> attribute, <a href="https://vincit.github.io/objection.js/guide/query-examples.html#relation-relate-queries" target="_blank" rel="noreferrer">click here</a>.</p><h3 id="chunk" tabindex="-1"><code>chunk()</code> <a class="header-anchor" href="#chunk" aria-label="Permalink to &quot;\`chunk()\`&quot;">​</a></h3><p>Fetch models in chunks from a large table, and perform passed <code>cb</code> function. There can be cases where your db will contain large number of datasets, and you may want to perform action on them. Loading them all at once will be inefficient memory and time wise.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">where</td><td style="text-align:center;">Y</td><td style="text-align:center;">where conditions</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">size</td><td style="text-align:center;">Y</td><td style="text-align:center;">Chunk size to be loaded from db</td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;">cb</td><td style="text-align:center;">Y</td><td style="text-align:center;">Callback function to be called, after each successful chunk load</td><td style="text-align:center;">--</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ isActive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users));</span></span></code></pre></div><h3 id="query" tabindex="-1"><code>query()</code> <a class="header-anchor" href="#query" aria-label="Permalink to &quot;\`query()\`&quot;">​</a></h3><p>Return new <code>QueryBuilder</code> instance.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Return query builder instance</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="transactions" tabindex="-1">Transactions <a class="header-anchor" href="#transactions" aria-label="Permalink to &quot;Transactions&quot;">​</a></h2><p>If you wish to use the repository to perform some transactions, you can do so like following. This way, you get all your repository methods.</p><h3 id="starttransaction" tabindex="-1"><code>startTransaction()</code> <a class="header-anchor" href="#starttransaction" aria-label="Permalink to &quot;\`startTransaction()\`&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> trx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.repo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstWhere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// alternatively, you can also call trx.rollback();</span></span></code></pre></div><h2 id="connection-methods" tabindex="-1">Connection Methods <a class="header-anchor" href="#connection-methods" aria-label="Permalink to &quot;Connection Methods&quot;">​</a></h2><p>If you wish to change connection of your repository on the fly, be it due to read-only connection or multi-tenancy database architecture.</p><h3 id="bindcon" tabindex="-1"><code>bindCon()</code> <a class="header-anchor" href="#bindcon" aria-label="Permalink to &quot;\`bindCon()\`&quot;">​</a></h3><p>To change, you can change the connection of your repository using <code>bindCon</code> method.</p><p><strong>Parameters:</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:center;">Description</th><th style="text-align:center;">Default</th></tr></thead><tbody><tr><td style="text-align:center;">conName</td><td style="text-align:center;">Y</td><td style="text-align:center;">Connection name, similar to any one of the connection name provided during configuration</td><td style="text-align:center;">--</td></tr></tbody></table><p><strong>Example</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> repo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> records</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindCon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres-read&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,127)]))}const g=t(n,[["render",l]]);export{c as __pageData,g as default};
