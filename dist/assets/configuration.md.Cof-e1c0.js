import{_ as s,c as i,a2 as a,o as t}from"./chunks/framework.C3fu0AGg.js";const k=JSON.parse('{"title":"Configuration","description":null,"frontmatter":{"title":"Configuration","description":null,"image":null},"headers":[],"relativePath":"configuration.md","filePath":"configuration.md","lastUpdated":1733079253000}'),n={name:"configuration.md"};function o(r,e,l,p,c,h){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h1><p>All of the configurations for your application are stored inside <code>config</code> directory. We have tried to document as much options as possible, so you can go through them at your own pace.</p><p>IntentJS comes packed with pre-defined configurations for databases, caches, filesystems, http settings, etc. You can use the same folder to create your own configurations and use them as needed in the application.</p><h2 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h2><p>IntentJS makes use of <code>dotenv</code> package to read environment variables from your .env files. Environment variables are useful when you are building application for multi-environments, this gives you the flexibility to keep your environment specific values isolated. For example, you can run a db on localhost when developing the app on your system, whereas in Prod it is likely that you will be using some server to host your db.</p><p>One added advantage of using Environment Variables is that it helps you keep your sensitive values as hidden and keep them away from unnecessary access.</p><p>IntentJS already makes use of some environment variables to configure database, cache, filesystems, queue, http, mailers etc. It should be already setup when you created your application using <code>create-intent-app</code> command. You can see all of the environment variables inside <code>.env</code>, and <code>.env.example</code> files.</p><h2 id="create-a-custom-configuration" tabindex="-1">Create a custom configuration <a class="header-anchor" href="#create-a-custom-configuration" aria-label="Permalink to &quot;Create a custom configuration&quot;">​</a></h2><p>While IntentJS comes with pre-defined configurations, you can always come across instances where you will need to create your own custom configuration. In this section, you will learn how to create your own configuration.</p><p>All of the configs are stored inside the <code>config</code> directory present at the root.</p><p>Let&#39;s say you want to create a namespaced config with <code>settings</code> name, you can do so by creating a file <code>config/settings.ts</code>.</p><p>This is how your config will look</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { configNamespace } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@intentjs/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> configNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;settings&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  yourCustomConfigSetting: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}));</span></span></code></pre></div><p>After creating the <code>settings</code> namespace, we now need to register it. You can simply export the <code>settings</code> namespaced config from the <code>config/index.ts</code> file.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./settings&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  settings,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // other configs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><h2 id="accessing-the-configuration-values" tabindex="-1">Accessing the configuration values <a class="header-anchor" href="#accessing-the-configuration-values" aria-label="Permalink to &quot;Accessing the configuration values&quot;">​</a></h2><p>If you want to refer the configuration inside your application, you can make use <code>IntentConfig</code> class.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ConfigService } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@intentjs/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appName;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>IntentConfig</code> is optimised for performance as it automatically caches your config the first time you request any config by it&#39;s key. We recommend using <code>IntentConfig</code>.</p></div><h2 id="reserved-namespaces" tabindex="-1">Reserved Namespaces <a class="header-anchor" href="#reserved-namespaces" aria-label="Permalink to &quot;Reserved Namespaces&quot;">​</a></h2><p>Following namespaces are reserved for IntentJS.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Changing the namespaces can potentially cause some unexpected behaviour in the code, and ultimately result in some functionality not working.</p></div><table tabindex="0"><thead><tr><th>Namespace</th><th>File Path</th></tr></thead><tbody><tr><td><code>app</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/app.ts" target="_blank" rel="noreferrer"><code>config/app.ts</code></a></td></tr><tr><td><code>db</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/db.ts" target="_blank" rel="noreferrer"><code>config/db.ts</code></a></td></tr><tr><td><code>cache</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/cache.ts" target="_blank" rel="noreferrer"><code>config/cache.ts</code></a></td></tr><tr><td><code>filesystem</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/filesystem.ts" target="_blank" rel="noreferrer"><code>config/filesystem.ts</code></a></td></tr><tr><td><code>http</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/http.ts" target="_blank" rel="noreferrer"><code>config/http.ts</code></a></td></tr><tr><td><code>localization</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/localization.ts" target="_blank" rel="noreferrer"><code>config/localization.ts</code></a></td></tr><tr><td><code>logger</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/logger.ts" target="_blank" rel="noreferrer"><code>config/logger.ts</code></a></td></tr><tr><td><code>mailer</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/mailer.ts" target="_blank" rel="noreferrer"><code>config/mailer.ts</code></a></td></tr><tr><td><code>queue</code></td><td><a href="https://github.com/intentjs/new-app-starter/blob/main/config/queue.ts" target="_blank" rel="noreferrer"><code>config/queue.ts</code></a></td></tr></tbody></table><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><p>This section mentions some of the best practices when it comes to managing and accessing configurations in your applications.</p><p>✅ We recommend keeping the usage of <code>process.env</code> limited to the <code>config</code> directory only. You can then read the values from the IntentConfig class. Another reason of doing this is that reading process.env will be a little slow as compared to reading the value from <code>ConfigService</code> class.</p>`,26)]))}const g=s(n,[["render",o]]);export{k as __pageData,g as default};
