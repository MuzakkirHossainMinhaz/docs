import{_ as t,c as s,o as a,ag as i}from"./chunks/framework.C8hRoDJf.js";const d=JSON.parse('{"title":"Contribution","description":null,"frontmatter":{"title":"Contribution","description":null,"image":null},"headers":[],"relativePath":"contribution.md","filePath":"contribution.md","lastUpdated":1744532781000}'),n={name:"contribution.md"};function o(l,e,r,h,p,c){return a(),s("div",null,e[0]||(e[0]=[i(`<h1 id="contributing-to-intent" tabindex="-1">Contributing to Intent <a class="header-anchor" href="#contributing-to-intent" aria-label="Permalink to &quot;Contributing to Intent&quot;">​</a></h1><p>We would love for you to contribute to Intent and help make it even better than it is today! As a contributor, here are the guidelines we would like you to follow:</p><ul><li><a href="#coc">Code of Conduct</a></li><li><a href="#question">Question or Problem?</a></li><li><a href="#issue">Issues and Bugs</a></li><li><a href="#feature">Feature Requests</a></li><li><a href="#submit">Submission Guidelines</a></li><li><a href="#development">Development Setup</a></li><li><a href="#rules">Coding Rules</a></li><li><a href="#commit">Commit Message Guidelines</a></li></ul><h2 id="code-of-conduct" tabindex="-1">Code of Conduct <a class="header-anchor" href="#code-of-conduct" aria-label="Permalink to &quot;Code of Conduct&quot;">​</a></h2><p>Help us keep Intent open and inclusive. Please read and follow our [Code of Conduct][coc]. --&gt;</p><h2 id="got-a-question-or-problem" tabindex="-1"><a name="question"></a> Got a Question or Problem? <a class="header-anchor" href="#got-a-question-or-problem" aria-label="Permalink to &quot;&lt;a name=&quot;question&quot;&gt;&lt;/a&gt; Got a Question or Problem?&quot;">​</a></h2><p><strong>Do not open issues for general support questions as we want to keep GitHub issues for bug reports and feature requests.</strong> You&#39;ve got much better chances of getting your questions answered on <a href="https://stackoverflow.com/questions/tagged/intentjs" target="_blank" rel="noreferrer">Stack Overflow</a> where the questions should be tagged with tag <code>intentjs</code>.</p><p>Stack Overflow is a much better place to ask questions since:</p><ul><li><p>there are thousands of people willing to help on Stack Overflow [maybe one day]</p></li><li><p>questions and answers stay available for public viewing so your question / answer might help someone else</p></li><li><p>Stack Overflow&#39;s voting system assures that the best answers are prominently visible.</p></li></ul><p>To save your and our time, we will systematically close all issues that are requests for general support and redirect people to Stack Overflow.</p><p>If you would like to chat about the question in real-time, you can reach out via [our discord channel][<a href="https://discord.gg/5ambDUN7Ge" target="_blank" rel="noreferrer">https://discord.gg/5ambDUN7Ge</a>].</p><h2 id="found-a-bug" tabindex="-1"><a name="issue"></a> Found a Bug? <a class="header-anchor" href="#found-a-bug" aria-label="Permalink to &quot;&lt;a name=&quot;issue&quot;&gt;&lt;/a&gt; Found a Bug?&quot;">​</a></h2><p>If you find a bug in the source code, you can help us by <a href="#submit-issue">submitting an issue</a> to our <a href="https://github.com/intentjs/intent" target="_blank" rel="noreferrer">GitHub Repository</a>. Even better, you can <a href="#submit-pr">submit a Pull Request</a> with a fix.</p><h2 id="missing-a-feature" tabindex="-1"><a name="feature"></a> Missing a Feature? <a class="header-anchor" href="#missing-a-feature" aria-label="Permalink to &quot;&lt;a name=&quot;feature&quot;&gt;&lt;/a&gt; Missing a Feature?&quot;">​</a></h2><p>You can <em>request</em> a new feature by <a href="#submit-issue">submitting an issue</a> to our GitHub Repository. If you would like to <em>implement</em> a new feature, please submit an issue with a proposal for your work first, to be sure that we can use it. Please consider what kind of change it is:</p><ul><li>For a <strong>Major Feature</strong>, first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. For your issue name, please prefix your proposal with <code>[discussion]</code>, for example &quot;[discussion]: your feature idea&quot;.</li><li><strong>Small Features</strong> can be crafted and directly <a href="#submit-pr">submitted as a Pull Request</a>.</li></ul><h2 id="submission-guidelines" tabindex="-1"><a name="submit"></a> Submission Guidelines <a class="header-anchor" href="#submission-guidelines" aria-label="Permalink to &quot;&lt;a name=&quot;submit&quot;&gt;&lt;/a&gt; Submission Guidelines&quot;">​</a></h2><h3 id="submitting-an-issue" tabindex="-1"><a name="submit-issue"></a> Submitting an Issue <a class="header-anchor" href="#submitting-an-issue" aria-label="Permalink to &quot;&lt;a name=&quot;submit-issue&quot;&gt;&lt;/a&gt; Submitting an Issue&quot;">​</a></h3><p>Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available.</p><p>We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using a repository or <a href="https://gist.github.com/" target="_blank" rel="noreferrer">Gist</a>. Having a live, reproducible scenario gives us wealth of important information without going back &amp; forth to you with additional questions like:</p><ul><li>version of Intent used</li><li>3rd-party libraries and their versions</li><li>and most importantly - a use-case that fails</li></ul><p>Unfortunately, we are not able to investigate / fix bugs without a minimal reproduction, so if we don&#39;t hear back from you we are going to close an issue that doesn&#39;t have enough info to be reproduced.</p><p>You can file new issues by filling out our <a href="https://github.com/intentjs/intent/issues/new" target="_blank" rel="noreferrer">new issue form</a>.</p><h3 id="submitting-a-pull-request-pr" tabindex="-1"><a name="submit-pr"></a> Submitting a Pull Request (PR) <a class="header-anchor" href="#submitting-a-pull-request-pr" aria-label="Permalink to &quot;&lt;a name=&quot;submit-pr&quot;&gt;&lt;/a&gt; Submitting a Pull Request (PR)&quot;">​</a></h3><p>Before you submit your Pull Request (PR) consider the following guidelines:</p><ol><li><p>Search <a href="https://github.com/intentjs/intent/pulls" target="_blank" rel="noreferrer">GitHub Pull Requests</a> for an open or closed PR that relates to your submission. You don&#39;t want to duplicate effort.</p></li><li><p>Fork this repository.</p></li><li><p>Make your changes in a new git branch:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> checkout</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> -b</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> my-fix-branch</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> main</span></span></code></pre></div></li><li><p>Create your patch, <strong>including appropriate test cases</strong>.</p></li><li><p>Follow our <a href="#rules">Coding Rules</a>.</p></li><li><p>Commit your changes using a descriptive commit message that follows our <a href="#commit">commit message conventions</a>. Adherence to these conventions is necessary because release notes are automatically generated from these messages.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> commit</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> -a</span></span></code></pre></div><p>Note: the optional commit <code>-a</code> command line option will automatically &quot;add&quot; and &quot;rm&quot; edited files.</p></li><li><p>Push your branch to GitHub:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> push</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> origin</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> my-fix-branch</span></span></code></pre></div></li><li><p>In GitHub, send a pull request to <code>intent:main</code>.</p></li></ol><ul><li><p>If we suggest changes then:</p><ul><li><p>Make the required updates.</p></li><li><p>Rebase your branch and force push to your GitHub repository (this will update your Pull Request):</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> rebase</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> main</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> -i</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> push</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> -f</span></span></code></pre></div></li></ul></li></ul><p>That&#39;s it! Thank you for your contribution!</p><h4 id="after-your-pull-request-is-merged" tabindex="-1">After your pull request is merged <a class="header-anchor" href="#after-your-pull-request-is-merged" aria-label="Permalink to &quot;After your pull request is merged&quot;">​</a></h4><p>After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:</p><ul><li><p>Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> push</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> origin</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> --delete</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> my-fix-branch</span></span></code></pre></div></li><li><p>Check out the main branch:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> checkout</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> main</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> -f</span></span></code></pre></div></li><li><p>Delete the local branch:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> branch</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> -D</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> my-fix-branch</span></span></code></pre></div></li><li><p>Update your main with the latest upstream version:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">git</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> pull</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> --ff</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> upstream</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> main</span></span></code></pre></div></li></ul><h2 id="development-setup" tabindex="-1"><a name="development"></a> Development Setup <a class="header-anchor" href="#development-setup" aria-label="Permalink to &quot;&lt;a name=&quot;development&quot;&gt;&lt;/a&gt; Development Setup&quot;">​</a></h2><p>You will need <a href="https://nodejs.org" target="_blank" rel="noreferrer">Node.js</a> version &gt;= 20.15.0.</p><ol><li>After cloning the repo, run:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">npm</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> install</span></span></code></pre></div><ol start="2"><li>In order to prepare the <code>integrations/sample-app</code>, run the <code>setup.sh</code> shell script.</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">sh</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> scripts/setup.sh</span></span></code></pre></div><p>This will initialise some necessary files, run a build, link the binaries.</p><ol start="3"><li>Now get the project running using the <code>npm run dev</code> command.</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">npm</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> run</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> dev</span></span></code></pre></div><h3 id="commonly-used-npm-scripts" tabindex="-1"><a name="common-scripts"></a>Commonly used NPM scripts <a class="header-anchor" href="#commonly-used-npm-scripts" aria-label="Permalink to &quot;&lt;a name=&quot;common-scripts&quot;&gt;&lt;/a&gt;Commonly used NPM scripts&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;"># run the integration apps and packages locally</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> npm</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> run</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;"># Build the project</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> npm</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> run</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;"># run the full unit tests suite</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> npm</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> run</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;"># run linter</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> npm</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> run</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> lint</span></span></code></pre></div><h2 id="coding-rules" tabindex="-1"><a name="rules"></a> Coding Rules <a class="header-anchor" href="#coding-rules" aria-label="Permalink to &quot;&lt;a name=&quot;rules&quot;&gt;&lt;/a&gt; Coding Rules&quot;">​</a></h2><p>To ensure consistency throughout the source code, keep these rules in mind as you are working:</p><ul><li>All features or bug fixes <strong>must be tested</strong> by one or more specs (unit-tests).</li><li>We follow [Google&#39;s JavaScript Style Guide][js-style-guide], but wrap all code at <strong>100 characters</strong>. An automated formatter is available (<code>npm run format</code>).</li></ul><h2 id="commit-message-guidelines" tabindex="-1"><a name="commit"></a> Commit Message Guidelines <a class="header-anchor" href="#commit-message-guidelines" aria-label="Permalink to &quot;&lt;a name=&quot;commit&quot;&gt;&lt;/a&gt; Commit Message Guidelines&quot;">​</a></h2><p>We have very precise rules over how our git commit messages can be formatted. This leads to <strong>more readable messages</strong> that are easy to follow when looking through the <strong>project history</strong>. But also, we use the git commit messages to <strong>generate the Intent change log</strong>.</p><h3 id="commit-message-format" tabindex="-1">Commit Message Format <a class="header-anchor" href="#commit-message-format" aria-label="Permalink to &quot;Commit Message Format&quot;">​</a></h3><p>Each commit message consists of a <strong>header</strong>, a <strong>body</strong> and a <strong>footer</strong>. The header has a special format that includes a <strong>type</strong>, a <strong>scope</strong> and a <strong>subject</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span>&lt;BLANK LINE&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>&lt;BLANK LINE&gt;</span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre></div><p>The <strong>header</strong> is mandatory and the <strong>scope</strong> of the header is optional.</p><p>Any line of the commit message cannot be longer than 100 characters! This allows the message to be easier to read on GitHub as well as in various git tools.</p><p>Footer should contain a <a href="https://help.github.com/articles/closing-issues-via-commit-messages/" target="_blank" rel="noreferrer">closing reference to an issue</a> if any.</p><p>Samples: (even more <a href="https://github.com/intwntjs/intent/commits/main" target="_blank" rel="noreferrer">samples</a>)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span>docs(changelog): update change log to beta.5</span></span>
<span class="line"><span>fix(core): need to depend on latest rxjs and zone.js</span></span></code></pre></div><h3 id="revert" tabindex="-1">Revert <a class="header-anchor" href="#revert" aria-label="Permalink to &quot;Revert&quot;">​</a></h3><p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &lt;hash&gt;.</code>, where the hash is the SHA of the commit being reverted.</p><h3 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;Type&quot;">​</a></h3><p>Must be one of the following:</p><ul><li><strong>build</strong>: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)</li><li><strong>chore</strong>: Updating tasks etc; no production code change</li><li><strong>ci</strong>: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)</li><li><strong>docs</strong>: Documentation only changes</li><li><strong>feat</strong>: A new feature</li><li><strong>fix</strong>: A bug fix</li><li><strong>perf</strong>: A code change that improves performance</li><li><strong>refactor</strong>: A code change that neither fixes a bug nor adds a feature</li><li><strong>style</strong>: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</li><li><strong>test</strong>: Adding missing tests or correcting existing tests</li><li><strong>sample</strong>: A change to the samples</li></ul><h3 id="scope" tabindex="-1">Scope <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;Scope&quot;">​</a></h3><p>The scope should have the name of the npm package affected (as perceived by person reading changelog generated from commit messages).</p><p>The following is the list of supported scopes:</p><ul><li><strong>core</strong>: for changes made on <code>packages/core</code> directory</li><li><strong>cli</strong>: for changes made on <code>packages/cli</code> directory</li><li><strong>integrations/sample-app</strong>: for changes made on <code>integrations/sample-app</code> directory</li></ul><p>If your change affect more than one package, separate the scopes with a comma (e.g. <code>core,cli</code>).</p><p>There are currently a few exceptions to the &quot;use package name&quot; rule:</p><ul><li><strong>packaging</strong>: used for changes that change the npm package layout in all of our packages, e.g. public path changes, package.json changes done to all packages, d.ts file/format changes, changes to bundles, etc.</li><li><strong>changelog</strong>: used for updating the release notes in CHANGELOG.md</li><li><strong>sample/#</strong>: for the example apps directory, replacing # with the example app number</li><li>none/empty string: useful for <code>style</code>, <code>test</code> and <code>refactor</code> changes that are done across all packages (e.g. <code>style: add missing semicolons</code>)</li></ul><h3 id="subject" tabindex="-1">Subject <a class="header-anchor" href="#subject" aria-label="Permalink to &quot;Subject&quot;">​</a></h3><p>The subject contains succinct description of the change:</p><ul><li>use the imperative, present tense: &quot;change&quot; not &quot;changed&quot; nor &quot;changes&quot;</li><li>don&#39;t capitalize first letter</li><li>no dot (.) at the end</li></ul><h3 id="body" tabindex="-1">Body <a class="header-anchor" href="#body" aria-label="Permalink to &quot;Body&quot;">​</a></h3><p>Just as in the <strong>subject</strong>, use the imperative, present tense: &quot;change&quot; not &quot;changed&quot; nor &quot;changes&quot;. The body should include the motivation for the change and contrast this with previous behavior.</p><h3 id="footer" tabindex="-1">Footer <a class="header-anchor" href="#footer" aria-label="Permalink to &quot;Footer&quot;">​</a></h3><p>The footer should contain any information about <strong>Breaking Changes</strong> and is also the place to reference GitHub issues that this commit <strong>Closes</strong>.</p><p><strong>Breaking Changes</strong> should start with the word <code>BREAKING CHANGE:</code> with a space or two newlines. The rest of the commit message is then used for this.</p><p>A detailed explanation can be found in this [document][commit-message-format].</p>`,76)]))}const g=t(n,[["render",o]]);export{d as __pageData,g as default};
