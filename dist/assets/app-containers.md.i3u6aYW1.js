import{_ as s,c as a,a2 as n,o as e}from"./chunks/framework.C3fu0AGg.js";const c=JSON.parse('{"title":"Application Containers","description":null,"frontmatter":{"title":"Application Containers","description":null,"image":null},"headers":[],"relativePath":"app-containers.md","filePath":"app-containers.md","lastUpdated":1733083052000}'),t={name:"app-containers.md"};function p(l,i,r,o,h,k){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="application-containers" tabindex="-1">Application Containers <a class="header-anchor" href="#application-containers" aria-label="Permalink to &quot;Application Containers&quot;">â€‹</a></h1><p>Intent is internally dependent on an application container be it for HTTP server, console commands, cron server or queue commands. You can think of these containers as an encapsulation of multiple <a href="./service-providers">Service Providers</a>. This is done so as to keep the application lightweight, for example you don&#39;t need controllers inside the console commands, queue worker or cron servers. So we will simply skip adding it inside the relevant application containers.</p><p>Intent by default comes with only one application container at <code>app/boot/container.ts</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { IntentAppContainer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@intentjs/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { AppServiceProvider } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./sp/app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationContainer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntentAppContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AppServiceProvider);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>In the above examples, we are adding our service providers to the default container.</p>`,5)]))}const E=s(t,[["render",p]]);export{c as __pageData,E as default};
