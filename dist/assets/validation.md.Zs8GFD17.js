import{_ as s,c as a,o as t,ag as n}from"./chunks/framework.C8hRoDJf.js";const c=JSON.parse('{"title":"Validation","description":"Learn how to implement robust data validation in IntentJS applications using class-validator, custom decorators, and validation schemas for ensuring data integrity in your REST APIs.","frontmatter":{"title":"Validation","description":"Learn how to implement robust data validation in IntentJS applications using class-validator, custom decorators, and validation schemas for ensuring data integrity in your REST APIs.","keywords":"validation, data validation, class-validator, validation schemas, decorators, request validation, database validation, custom validators, validation rules, input validation","image":null},"headers":[],"relativePath":"validation.md","filePath":"validation.md","lastUpdated":1744532933000}'),l={name:"validation.md"};function e(h,i,p,k,d,r){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h1><p>While building REST APIs, validating input data becomes and important practice to validate the incoming data.</p><p>IntentJS internally uses <code>class-validator</code> package to perform data validation. On top of what \`class-validator\` offers, IntentJS comes with some powerful and useful decorators which make data validation in your application, actually a breeze.</p><h2 id="validation-in-intent" tabindex="-1">Validation in Intent <a class="header-anchor" href="#validation-in-intent" aria-label="Permalink to &quot;Validation in Intent&quot;">​</a></h2><h3 id="creating-schema" tabindex="-1">Creating Schema <a class="header-anchor" href="#creating-schema" aria-label="Permalink to &quot;Creating Schema&quot;">​</a></h3><p>In order to validate your input, you first need to create a schema which we will be using to compare. You can think of schemas as simple classes which has some meta information attached.</p><p>You can create a schema like below</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> IsNotEmpty</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> IsString </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;class-validator&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#F9E2AF;--shiki-dark-font-style:italic;"> CreateBookDto</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">  @IsString</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">()</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">  @IsNotEmpty</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">()</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  name</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> string</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">  @IsString</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">()</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">  @IsNotEmpty</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">()</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  author</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> string</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><p>For available validation decorators, you can refer to the<a href="https://github.com/typestack/class-validator?tab=readme-ov-file#validation-decorators" target="_blank" rel="noreferrer"> \`class-validator\` </a>documentation.</p><h3 id="using-validator-class" tabindex="-1">Using Validator class <a class="header-anchor" href="#using-validator-class" aria-label="Permalink to &quot;Using Validator class&quot;">​</a></h3><p>Now that you have the schema ready, we will need to validate it. To do so, you can make use of the <code>Validator</code> class.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> Validator </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;@intentjs/core/validator&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> validator </span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">=</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> Validator</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">compareWith</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(CreateBookDto)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span></code></pre></div><p>Inside the <code>compareWith</code> method we are passing the schema that we created previously. We can now use the new <code>validator</code> that we created to validate our inputs. Let&#39;s see an example below</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">await</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> validator</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">validate</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  name</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;Get Epic Shit Done&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  author</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;Ankur Warikoo&#39;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span></code></pre></div><p>The <code>validate</code> method internally creates the instance of the schema we passed, and then validates it. In above example, the validation will pass. </p><p>The <code>validate</code> method also returns the instance of the schema if the validation has been successful. See below</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> dto </span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">=</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> await</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> validator</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">validate</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  name</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;Get Epic Shit Done&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  author</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;Ankur Warikoo&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">console</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(dto</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">name)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9CA0B0;--shiki-light-font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic;">// Get Epic Shit Done</span></span></code></pre></div><p>You can now use this schema the way you like, because it&#39;s just a simple class.</p><h4 id="validation-failure" tabindex="-1">Validation Failure <a class="header-anchor" href="#validation-failure" aria-label="Permalink to &quot;Validation Failure&quot;">​</a></h4><p>Validator class throws <code>ValidationFailed</code> exception if the validation fails. Let&#39;s see one example below</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">await</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> validator</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">validate</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  name</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;Get Epic Shit Done&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span></code></pre></div><p>This would throw an exception because it doesn&#39;t have the <code>author</code> attribute as it is expected inside the schema. To get the list of all the validation rules that failed, you can make use of the <code>getErrors</code> method in the exception.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">try</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  validator</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">validate</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> name</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;Get Epic Shit Done&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> catch</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> (e) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">  if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> (e </span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">instanceof</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#F9E2AF;--shiki-dark-font-style:italic;"> ValidationFailed</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">(e</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">getErrors</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">())</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><p>The <code>getErrors</code> method returns the error object like below</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  &#39;author&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> [</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">&#39;Author should not be empty&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">]</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span></span></code></pre></div><h4 id="adding-meta" tabindex="-1">Adding Meta <a class="header-anchor" href="#adding-meta" aria-label="Permalink to &quot;Adding Meta&quot;">​</a></h4><h2 id="using-with-request-and-controllers" tabindex="-1">Using with Request and Controllers <a class="header-anchor" href="#using-with-request-and-controllers" aria-label="Permalink to &quot;Using with Request and Controllers&quot;">​</a></h2><p>We have also added a few helper methods built on top of the <code>Validator</code> class to help you write clean and better code.</p><h3 id="using-intentrequest" tabindex="-1">Using IntentRequest <a class="header-anchor" href="#using-intentrequest" aria-label="Permalink to &quot;Using IntentRequest&quot;">​</a></h3><p>If you want to validate the payload that you are getting inside the request, you can make use of the <code>validate</code> method present inside the <code>IntentRequest</code> class.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">@Controller</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">()</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#F9E2AF;--shiki-dark-font-style:italic;"> BookController</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">  @Post</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&#39;)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  async</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;"> create</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(@</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">IRequest</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">() </span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">req</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">: </span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">IntentRequest</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">    const </span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">dto</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;"> =</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> await</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> req</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">validate</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">CreateBookDto</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">);</span></span>
<span class="line"><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">    return </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> msg</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;Book Created Successfully!&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> }</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  }</span></span>
<span class="line"><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">}</span></span></code></pre></div><p><code>validate</code> method will automatically validate the data along with adding meta inside the schema instance. </p><h3 id="using-validate-decorator" tabindex="-1">Using @Validate Decorator <a class="header-anchor" href="#using-validate-decorator" aria-label="Permalink to &quot;Using @Validate Decorator&quot;">​</a></h3><p>You can also make use of the <code>Validate</code> decorator to automatically validate the incoming request. And if you want the instance of the validated schema, you can make use of the <code>Dto</code> decorator. Let&#39;s look at an example below:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> Body </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;@intentjs/core/http&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> Validate </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;@intentjs/core/validator&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">@Controller</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">()</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CBA6F7;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#F9E2AF;--shiki-dark-font-style:italic;"> BookController</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">  @Post</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&#39;)</span></span>
<span class="line"><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">  @</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">Validate</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">CreateBookDto</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">  async</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;"> create</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(@</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">Dto</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">() </span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">dto</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">: </span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">CreateBookDto</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span></span>
<span class="line"><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">    return </span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> msg</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;Book Created Successfully!&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> }</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">  }</span></span>
<span class="line"><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">}</span></span></code></pre></div><h2 id="available-decorators" tabindex="-1">Available Decorators <a class="header-anchor" href="#available-decorators" aria-label="Permalink to &quot;Available Decorators&quot;">​</a></h2><p>We have added a few validation decorators which we believe will be super useful for some of your scenarios.</p><p>List of decorators available</p><ul><li><a href="./validation#exists">Exists (Database)</a></li><li><a href="./validation#isunique">IsUnique (Database)</a></li><li><a href="./validation#isvaluefromconfig">IsFromConfig</a></li><li><a href="./validation#isequaltoprop">IsEqualToProp</a></li><li><a href="https://github.com/typestack/class-validator?tab=readme-ov-file#validation-decorators" target="_blank" rel="noreferrer">List of <code>class-validator</code> decorators</a></li></ul><h4 id="exists-database" tabindex="-1">Exists (Database) <a class="header-anchor" href="#exists-database" aria-label="Permalink to &quot;Exists (Database)&quot;">​</a></h4><p>Rule to validate that the property should exist inside the specified database table.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">@Exists</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> table</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;users&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> col</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;email&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> }</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">)</span></span></code></pre></div><h4 id="isunique" tabindex="-1">IsUnique <a class="header-anchor" href="#isunique" aria-label="Permalink to &quot;IsUnique&quot;">​</a></h4><p>Rule to validate that the property doesn&#39;t exist inside the specified database table.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">@IsUnique</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> table</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;users&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> col</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;email&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> }</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">)</span></span></code></pre></div><h4 id="isfromconfig" tabindex="-1">IsFromConfig <a class="header-anchor" href="#isfromconfig" aria-label="Permalink to &quot;IsFromConfig&quot;">​</a></h4><p>Rule to check if a prop&#39;s value matches the value of the key from the config.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">@IsFromConfig</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">{</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;"> key</span><span style="--shiki-light:#179299;--shiki-dark:#94E2D5;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;"> &#39;app.locale&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;"> }</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">)</span></span></code></pre></div><h4 id="isequaltoprop" tabindex="-1">IsEqualToProp <a class="header-anchor" href="#isequaltoprop" aria-label="Permalink to &quot;IsEqualToProp&quot;">​</a></h4><p>Rule to check if one prop is equal to another.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes catppuccin-latte catppuccin-mocha vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">password</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> string</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic;">@IsEqualToProp</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6E3A1;">&#39;password&#39;</span><span style="--shiki-light:#FE640B;--shiki-dark:#FAB387;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;">confirmPassword</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#CDD6F4;"> string</span><span style="--shiki-light:#7C7F93;--shiki-dark:#9399B2;">;</span></span></code></pre></div>`,51)]))}const y=s(l,[["render",e]]);export{c as __pageData,y as default};
